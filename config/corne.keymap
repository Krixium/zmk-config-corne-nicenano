/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#include "zmk-helpers/key-labels/42.h"                                                 // Source key-labels.
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5 // Left-hand keys.
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5 // Right-hand keys.
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                                 // Thumb keys.

/* Left-hand HRMs. */
ZMK_HOLD_TAP(hml,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;
)

/* Right-hand HRMs. */
ZMK_HOLD_TAP(hmr,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;
)

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
//                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
                        bindings = <
   &kp TAB   &kp Q       &kp W       &kp E        &kp R        &kp T       &kp Y &kp U         &kp I           &kp O        &kp P          &kp BSPC
   &kp LCTRL &hml LGUI A &hml LALT S &hml LSHFT D &hml LCTRL F &kp G       &kp H &hmr RCTRL J  &hmr RSHFT K    &hmr RALT L  &hmr RGUI SEMI &kp SQT
   &kp LSHFT &kp Z       &kp X       &kp C        &kp V        &kp B       &kp N &kp M         &kp COMMA       &kp DOT      &kp FSLH       &kp ESC
                                        &kp LGUI &mo 1 &kp SPACE       &kp RET &mo 2 &kp RALT
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
// | GL   |  GL |  GL |  GL |  GL |  GL |   | LFT | DWN |  UP | RGT |     |  f12 |
// | SHFT |  f1 |  f2 |  f3 |  f4 |  f5 |   |  f6 |  f7 |  f8 |  f9 | f10 |  f11 |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp TAB    &kp N1       &kp N2       &kp N3       &kp N4       &kp N5             &kp N6   &kp N7   &kp N8 &kp N9    &kp N0  &kp BSPC
   &to 3      &to 3        &to 3        &to 3        &to 3        &to 3              &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans  &kp F12
   &kp LSHFT  &kp F1       &kp F2       &kp F3       &kp F4       &kp F5             &kp F6   &kp F7   &kp F8 &kp F9    &kp F10 &kp F11
                                                     &kp LGUI &trans &kp SPACE       &kp RET &trans &kp RALT
                        >;
                };
                raise_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !   |  @   |  #  |  $   |  %   |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL | PSBR | PRNT | DEL | PGUP | HOME |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |      |      | INS | PGDN | END  |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                      | GUI |      | SPC  |   | ENT |     | ALT |
                        bindings = <
   &kp  TAB  &kp EXCL         &kp AT    &kp HASH &kp DLLR  &kp PRCNT       &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR &kp RPAR &kp BSPC
   &kp LCTRL &kp PAUSE_BREAK  &kp PSCRN &kp DEL  &kp PG_UP &kp HOME        &kp MINUS &kp EQUAL &kp LBKT        &kp RBKT &kp BSLH &kp GRAVE
   &kp LSHFT &trans           &trans    &kp INS  &kp PG_DN &kp END         &kp UNDER &kp PLUS  &kp LBRC        &kp RBRC &kp PIPE &kp TILDE
                                           &kp LGUI &trans &kp SPACE       &kp RET &trans &kp RALT
                        >;
                };
                game_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
//                    | GUI |     | SPC |   | ENT | base | ALT |
                        bindings = <
   &kp TAB   &kp Q      &kp W      &kp E       &kp R       &kp T       &kp Y &kp U        &kp I           &kp O        &kp P         &kp BSPC
   &kp LCTRL &kp A      &kp S      &kp D       &kp F       &kp G       &kp H &kp J        &kp K           &kp L        &kp SEMI      &kp SQT
   &kp LSHFT &kp Z      &kp X      &kp C       &kp V       &kp B       &kp N &kp M        &kp COMMA       &kp DOT      &kp FSLH      &kp ESC
                                        &kp LALT &mo 1 &kp SPACE       &kp RET &to 0 &kp RALT
                        >;
                };
        };
};
